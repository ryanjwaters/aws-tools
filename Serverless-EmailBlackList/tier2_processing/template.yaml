Parameters:
  Stage:
    Type: String

  MyQueueEmailArn:
    Type: String
    MinLength: 1

  MyQueueEmailBounceArn:
    Type: String
    MinLength: 1

  MySNSTopicEmailBounceArn:
    Type: String
    MinLength: 1

  MyCustomResourceTestArn:
    Type: String
    MinLength: 1  

Resources:

  MyLambdaEmail:
    Type: AWS::Lambda::Function
    Properties:
      Handler: email.handler
      Runtime: python3.7
      Role: !GetAtt MyLambdaExecutionRole.Arn
      Environment:
        Variables:
          #databaseName: '{{resolve:ssm:DBTableName-Dev:1}}'
          databaseName: !Join ['', ['{{resolve:ssm:DBTableName-', !Ref Stage, ':1}}' ]]

  MyLambdaEmailBounce:
    Type: AWS::Lambda::Function
    Properties:
      Handler: emailBounce.handler
      Runtime: python3.7
      Role: !GetAtt MyLambdaExecutionRole.Arn
      Environment:
        Variables:
          #databaseName: '{{resolve:ssm:DBTableName-Dev:1}}'
          databaseName: !Join ['', ['{{resolve:ssm:DBTableName-', !Ref Stage, ':1}}' ]]

  ########################################################################################## 
  # Lambda Execution Role

  MyLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      # Who can assume this role (lambda can)
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: 
              - 'sts:AssumeRole'
            Principal:
              Service: 
                - lambda.amazonaws.com

      # Execution permissions: AWS Managed policies
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaSQSQueueExecutionRole"
        - "arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess"
        - "arn:aws:iam::aws:policy/AmazonSESFullAccess"
        - "arn:aws:iam::aws:policy/AmazonSSMFullAccess"
        
      # Execution permissions: Inline policy
      Policies:
        - PolicyName: my-policy-test
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 
                  - 'logs:*'
                Resource: 'arn:aws:logs:*:*:*'
  
  ##########################################################################################
  # Lambda 'event source mapping' to connect the SQS queues to the lambda functions

  MyEventSourceMappingEmail:
    Type: AWS::Lambda::EventSourceMapping
    Properties: 
      EventSourceArn: 
        !Ref MyQueueEmailArn
      FunctionName:
        !GetAtt MyLambdaEmail.Arn

  MyEventSourceMappingEmailBounce:
    Type: AWS::Lambda::EventSourceMapping
    Properties: 
      EventSourceArn: 
        !Ref MyQueueEmailBounceArn
      FunctionName:
        !GetAtt MyLambdaEmailBounce.Arn

##########################################################################################

  MyCustomResourceTest:
    Type: "Custom::Test"
    Properties:
      ServiceToken: !Ref MyCustomResourceTestArn
      identity: !Join ['', ['{{resolve:ssm:VerifiedEmail-', !Ref Stage, ':1}}' ]]
      snsTopicARN: !Ref MySNSTopicEmailBounceArn